generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               UserRole
  needPasswordChange Boolean    @default(true)
  status             UserStatus @default(ACTIVE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  admin              Admin?
  doctor             Doctor?
  patient            Patient?

  @@map("users")
}

model Admin {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  phone        String
  profilePhoto String?
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

model Doctor {
  id                 String   @id @default(uuid())
  name               String
  email              String   @unique
  phone              String
  profilePhoto       String?
  address            String?
  registrationNumber String
  experience         Int      @default(0)
  gender             Gender
  appointmentFee     Int
  qualifications     String
  currentWorkplace   String
  designation        String
  isDeleted          Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user              User                @relation(fields: [email], references: [email])
  doctorSpecialties DoctorSpecialties[]
  doctorSchedules   DoctorSchedules[]
  appointment       Appointment[]

  @@map("doctors")
}

model Schedule {
  id              String            @id @default(uuid())
  startDateTime   DateTime
  endDateTime     DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  doctorSchedules DoctorSchedules[]
  appointment     Appointment?

  @@map("schedules")
}

model DoctorSchedules {
  doctorId      String
  doctor        Doctor       @relation(fields: [doctorId], references: [id])
  scheduleId    String
  schedule      Schedule     @relation(fields: [scheduleId], references: [id])
  isBooked      Boolean      @default(false)
  appointmentId String?      @unique
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])

  @@id([doctorId, scheduleId])
  @@map("doctor_schedules")
}

model Patient {
  id           String   @id @unique @default(uuid())
  name         String
  email        String   @unique
  profilePhoto String?
  phone        String?
  address      String?
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user              User               @relation(references: [email], fields: [email])
  patientHealthData PatientHealthData?
  medicalReport     MedicalReport[]
  appointment       Appointment[]

  @@map("patients")
}

model Specialties {
  id                String              @id @default(uuid())
  title             String              @unique
  icon              String
  doctorSpecialties DoctorSpecialties[]

  @@map("specialties")
}

model DoctorSpecialties {
  doctorId    String
  specialtyId String

  specialties Specialties @relation(fields: [specialtyId], references: [id])
  doctor      Doctor      @relation(fields: [doctorId], references: [id])

  @@id([doctorId, specialtyId])
  @@map("doctor_specialties")
}

model PatientHealthData {
  id                  String        @id @default(uuid())
  patientId           String        @unique
  patient             Patient       @relation(fields: [patientId], references: [id])
  gender              Gender
  dateOfBirth         String
  bloodGroup          BloodGroup
  hasAllergies        Boolean?      @default(false)
  hasDiabetes         Boolean?      @default(false)
  height              String
  weight              String
  smokingStatus       Boolean?      @default(false)
  dietaryPreferences  String?
  pregnancyStatus     Boolean?      @default(false)
  mentalHealthHistory String?
  immunizationStatus  String?
  hasPastSurgeries    Boolean?      @default(false)
  recentAnxiety       Boolean?      @default(false)
  recentDepression    Boolean?      @default(false)
  maritalStatus       MaritalStatus @default(UNMARRIED)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@map("patient_health_datas")
}

model MedicalReport {
  id         String   @id @default(uuid())
  patientId  String
  patient    Patient  @relation(fields: [patientId], references: [id])
  reportName String
  reportLink String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Appointment {
  id              String            @id @default(uuid())
  patientId       String
  patient         Patient           @relation(fields: [patientId], references: [id])
  doctorId        String
  doctor          Doctor            @relation(fields: [doctorId], references: [id])
  scheduleId      String            @unique
  schedule        Schedule          @relation(fields: [scheduleId], references: [id])
  videoCallingId  String
  status          AppointmentStatus @default(SCHEDULED)
  paymentStatus   PaymentStatus     @default(UNPAID)
  createAt        DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  DoctorSchedules DoctorSchedules?

  @@map("appointments")
}

enum AppointmentStatus {
  SCHEDULED
  INPROGRESS
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PAID
  UNPAID
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
}

enum MaritalStatus {
  MARRIED
  UNMARRIED
}
